name: Nightly Release Build

on:
  push:
    tags:
      - 'v*'  # Trigger on tags like v1.0.0

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            ext: ""
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            ext: ".exe"
          - target: x86_64-apple-darwin
            os: macos-latest
            ext: ""
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      # For Windows targets: Install Visual Studio Build Tools
      - name: Install MSVC Tools (Windows only)
        if: matrix.target == 'x86_64-pc-windows-msvc'
        uses: ilammy/msvc-dev-cmd@v1

      # Install nightly Rust for the target
      - name: Install Rust (nightly)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          targets: ${{ matrix.target }}

      # Cache Rust dependencies and build artifacts
      - name: Cache cargo registry and target directory
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-

      - name: Build Release
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TERM_COLOR: always

      - name: Get Binary Name
        id: bin_name
        shell: bash
        run: |
          # Extract package name from Cargo.toml
          BIN_NAME=$(awk -F'"' '/^\[package\]/ { in_package=1 } in_package && /^name = / { print $2; exit }' Cargo.toml)
          if [ -z "$BIN_NAME" ]; then
            echo "Could not determine binary name from Cargo.toml"
            exit 1
          fi
          echo "BIN_NAME=$BIN_NAME" >> $GITHUB_ENV
          echo "binary_name=$BIN_NAME" >> $GITHUB_OUTPUT

      - name: Prepare Artifact
        shell: bash
        run: |
          OUTPUT_BINARY="${{ env.BIN_NAME }}-${{ matrix.target }}${{ matrix.ext }}"
          
          # Windows needs special handling for executable paths
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            cp target/${{ matrix.target }}/release/${{ env.BIN_NAME }}.exe $OUTPUT_BINARY
          else
            cp target/${{ matrix.target }}/release/${{ env.BIN_NAME }} $OUTPUT_BINARY
          fi
          
          echo "ASSET_PATH=$OUTPUT_BINARY" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ${{ env.ASSET_PATH }}

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # Generate dynamic release notes
      - name: Generate Release Body
        shell: bash
        run: |
          cat << EOF > release_body.md
          Automated nightly release
          Toolchain: $(rustc -V)
          Build date: $(date -u +'%Y-%m-%dT%H:%M:%SZ')
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}  # Fixed: Uses tag name directly
          body_path: release_body.md    # Fixed: Uses generated file
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}